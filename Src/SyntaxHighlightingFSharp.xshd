<?xml version="1.0" ?> <!--encoding="UTF-8" --> 
<SyntaxDefinition name = "F#" extensions = ".fs;.fsi;.fsx" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  
  <!-- 
  http://avalonedit.net/documentation/html/4d4ceb51-154d-43f0-b876-ad9640c5d2d8.htm

  copied and adapted from 
  https://github.com/icsharpcode/AvalonEdit/tree/master/ICSharpCode.AvalonEdit/Highlighting/Resources 
  https://github.com/icsharpcode/SharpDevelop/wiki/XSHD-Tags
  https://github.com/icsharpcode/SharpDevelop/wiki/Syntax-highlighting    
  The named colors 'Comment' and 'String' are also used in SharpDevelop to detect if a line is inside a multiline string/comment 
  
  AvalonEditB supports all named System.Windows.FontWeights, (while the original SharpDevelop.AvalonEdit only supports normal and bold.)
  see schema https://github.com/goswinr/AvalonEditB/blob/main/AvalonEditB/Highlighting/Resources/ModeV2.xsd
  -->
  
  <!-- 
  use this extension to show colors in vs code:
  https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize  
  -->
  <Color name="Comment"             foreground="#22AA22" fontWeight="300" fontStyle="italic" stylisticSet1="true"/> 
  <Color name="DocComment"          foreground="#005500" fontWeight="300" fontStyle="italic" />
  <Color name="TODO"                foreground="#EE0000" fontWeight="800"/>
  <Color name="HACK"                foreground="#A0A000" fontWeight="800"/>
  
  <Color name="String"              foreground="#BB1111" />
  <Color name="StringVerbatim"      foreground="#CC0000" />  
  <Color name="StringFormatting"    foreground="#990099" />
  <Color name="StringEscaped"       foreground="#A050CC" />  
  <Color name="DollarInlines"       foreground="#000088" />
  <Color name="Char"                foreground="#FF0040" />

  <Color name="CompilerDirectives"  foreground="#FF8800" /> <!-- eg: #if COMPILED-->

  <Color name="LoadDirectives"      foreground="#BB1111" /> <!-- the #r or #load or #I-->
  <Color name="LoadDllPath"         foreground="#778899" /> <!-- #r the directory path including the quotes-->
  <Color name="LoadDll"             foreground="#DD20B0" /> <!-- #r the dll name -->
  <Color name="LoadNuget"           foreground="#CD10A0" fontWeight="bold" /> <!-- #r the nuget name -->
  <Color name="LoadPath"            foreground="#0000B0" /> <!-- for #I path -->
  
  <Color name="Punctuation"         foreground="#7755FF" />
  <Color name="Attributes"          foreground="#AA88AA" />  
  <Color name="Keywords"            foreground="#0000DD"  fontWeight="normal" fontStyle="italic"  stylisticSet1="true"/>
  <Color name="KeywordsBang"        foreground="#2200DD"  fontWeight="bold"   fontStyle="italic"  stylisticSet1="true"/>
  <Color name="Keywords2"           foreground="#BB0044"  fontWeight="bold"   fontStyle="italic"  stylisticSet1="true"/>
  <Color name="Keywords2Bang"       foreground="#BB0044"  fontWeight="bold"   fontStyle="italic"  stylisticSet1="true"/> 
  <Color name="ReservedKeywords"    foreground="#7777FF" /> <!-- fontWeight="bold" -->
  <Color name="MethodCall"          foreground="#0000AA" /> <!-- fontWeight="bold" fontStyle="italic"-->
  <Color name="NumberLiteral"       foreground="#CD10A0" />
  <Color name="NegNumberLiteral"    foreground="#FF0077" /> <!--fontWeight="bold" -->
  <Color name="ExponentNumberLit"   foreground="#1199DD" />
  <Color name="HexNumberLiteral"    foreground="#FF8800" />
  <Color name="BinNumberLiteral"    foreground="#FF8800" /> 
  <Color name="NumberType"          foreground="#888888" />
  <Color name="FailPath"            foreground="#888888" />
  <Color name="FailString"          foreground="#D0A040" fontWeight="normal" fontStyle="italic" />  
  <Color name="Exception"           foreground="#C06030" />
  <Color name="PrintStatement"      foreground="#206060" />
  <Color name="PrintString"         foreground="#E08070" />
  <Color name="TrueCol"             foreground="#008090" fontWeight="800" fontStyle="italic" /> 
  <Color name="FalseCol"            foreground="#A70090" fontWeight="800" fontStyle="italic" /> 
  <Color name="Semicolon"           foreground="#A0A0A0" />
  <!-- 
  <Color name="TypeAnnotation"      foreground="#2080B0" /> 
  <Color name="RecordNames"         foreground="#B06000" />   
  <Color name="LetBinding"          foreground="#7030A0" />
  <Color name="LetPrivate"          foreground="#6070A0" />
  <Color name="LetRec"              foreground="#B03080" />
  <Color name="LetMutable"          foreground="#D08030" />   
  -->
  <Color name="InDoubleTicks"       foreground="#000000" /><!-- just black like the rest, don't highlight symbols-->
  
  <Color name="DocCommentStart"     foreground="#CCCCCC" /> <!-- taken from https://github.com/icsharpcode/AvalonEdit/blob/master/ICSharpCode.AvalonEdit/Highlighting/Resources/XmlDoc.xshd-->
  <Color name="XmlString"           foreground="#EE3333" />
  <Color name="XmlPunctuation"      foreground="#888888" />
  <Color name="KnownDocTags"        foreground="#8888EE" />
  
  <Color name="NonEval"             foreground="#CCCCCC" />


  <!-- ReExes that are listed higher have precedence of lower positions in this list
  Spans are overwriting rules even if rule appears before the span!-->

  <RuleSet name="_DocCommentSet">
    <Span color="DocComment">
      <Begin color="XmlPunctuation">&lt;</Begin>
      <End color="XmlPunctuation">&gt;</End>
      <RuleSet>
        <Span color="XmlString">
          <Begin>"</Begin>
          <End>"</End>
        </Span>
        <Keywords color="XmlPunctuation">
          <Word>/</Word>
          <Word>|</Word>
          <Word>=</Word>
        </Keywords>
        <Keywords color="KnownDocTags">
          <Word>c</Word>
          <Word>code</Word>
          <Word>example</Word>
          <Word>exception</Word>
          <Word>list</Word>
          <Word>para</Word>
          <Word>param</Word>
          <Word>paramref</Word>
          <Word>permission</Word>
          <Word>remarks</Word>
          <Word>returns</Word>
          <Word>see</Word>
          <Word>seealso</Word>
          <Word>summary</Word>
          <Word>value</Word>          
          <Word>type</Word>
          <Word>name</Word>
          <Word>cref</Word>
          <Word>item</Word>
          <Word>term</Word>
          <Word>description</Word>
          <Word>listheader</Word>
          <Word>typeparam</Word>
          <Word>typeparamref</Word>
        </Keywords>
      </RuleSet>
    </Span>
  </RuleSet>
  
  <RuleSet name="_CommentMarkerSet">
    <Keywords color="TODO">
      <Word>TODO</Word>
      <Word>FIXME</Word>
      <Word>??</Word>  
      <Word>!!</Word>    
    </Keywords>
    <Keywords color="HACK">
      <Word>HACK</Word>
      <Word>UNDONE</Word>      
    </Keywords>
  </RuleSet >
  
  <RuleSet name="CommentSet">  

    <Span color="DocComment">
      <Begin color="DocCommentStart">///(?!/)</Begin>
      <RuleSet>
        <Import ruleSet="_DocCommentSet"/>
        <Import ruleSet="_CommentMarkerSet"/>
      </RuleSet>
    </Span>

    <Span color="Comment" ruleSet="_CommentMarkerSet">
      <Begin>//</Begin>      
    </Span>

  </RuleSet >

  <RuleSet name="InlineCommentSet">
    <Span color="Comment" ruleSet="_CommentMarkerSet" multiline="true">
      <Begin>\(\*</Begin>
      <End>\*\)</End>      
    </Span> 
  </RuleSet >
  
  <RuleSet name="KeywordSet">
    <Keywords color="TrueCol">    <Word>true</Word>    </Keywords>  
    <Keywords color="FalseCol">   <Word>false</Word>   </Keywords>

    <Rule color="KeywordsBang">match!</Rule> <!-- because exclamation mark does not work in <Word> tag -->
    <Rule color="KeywordsBang">let!</Rule>
    <Rule color="KeywordsBang">do!</Rule>
    <Rule color="Keywords2Bang">yield!</Rule>
    <Rule color="Keywords2Bang">return!</Rule>
    <Rule color="Keywords2Bang">use!</Rule>   

     
    <Keywords color="Keywords2">
      <Word>yield</Word> 
      <Word>return</Word>
      <Word>rec</Word> 
      <Word>and</Word>

    </Keywords>

    <Keywords color="Keywords">

      <Word>__SOURCE_DIRECTORY__</Word>
      <Word>__SOURCE_FILE__</Word>
      <Word>__LINE__</Word>
      <!-- take from https://github.com/Microsoft/visualfsharp/blob/f214dcc38f6d34db8902eb40bd5b037ade59a67c/src/fsharp/lexhelp.fs#L362 -->
      <Word>abstract</Word>      
      <Word>as</Word>
      <Word>assert</Word>
      <Word>base</Word>
      <Word>begin</Word>
      <Word>class</Word>
      <Word>default</Word>
      <Word>delegate</Word>
      <Word>do</Word>      
      <Word>done</Word>
      <Word>downcast</Word>
      <Word>downto</Word>
      <Word>elif</Word>
      <Word>else</Word>
      <Word>end</Word>
      <Word>exception</Word>
      <Word>extern</Word>
      <!-- <Word>FALSE</Word> -->
      <Word>finally</Word>
      <Word>fixed</Word>    
      <Word>for</Word>
      <Word>fun</Word>
      <Word>function</Word>
      <Word>global</Word>
      <Word>if</Word>
      <Word>in</Word>
      <Word>inherit</Word>
      <Word>inline</Word>
      <Word>interface</Word>
      <Word>internal</Word>
      <Word>lazy</Word>
      <Word>let</Word> 
      <Word>match</Word>      
      <Word>member</Word>
      <Word>module</Word>
      <Word>mutable</Word>
      <Word>namespace</Word>
      <Word>new</Word>
      <Word>not</Word>
      <Word>null</Word>
      <Word>of</Word>
      <Word>open</Word>
      <Word>or</Word>
      <Word>override</Word>
      <Word>private</Word>
      <Word>public</Word>           
      <Word>select</Word>
      <Word>static</Word>
      <Word>struct</Word>
      <Word>then</Word>
      <Word>to</Word>
      <!-- <Word>TRUE</Word> -->
      <Word>try</Word>      
      <Word>typeof</Word>
      <Word>type</Word>
      <Word>upcast</Word>
      <Word>use</Word>      
      <Word>val</Word>
      <Word>void</Word>
      <Word>when</Word>
      <Word>while</Word>
      <Word>with</Word>        
    </Keywords>

    <!-- exclude for now to keep highlighting rules faster
    <Keywords color = "ReservedKeywords">
      <Word>atomic</Word>
      <Word>break</Word>
      <Word>checked</Word>
      <Word>component</Word>
      <Word>const</Word>
      <Word>constraint</Word>
      <Word>constructor</Word>
      <Word>continue</Word>
      <Word>eager</Word>
      <Word>event</Word>
      <Word>external</Word>
      <Word>fixed</Word>
      <Word>functor</Word>
      <Word>include</Word>
      <Word>method</Word>
      <Word>mixin</Word>
      <Word>object</Word>
      <Word>parallel</Word>
      <Word>process</Word>
      <Word>protected</Word>
      <Word>pure</Word>
      <Word>sealed</Word>
      <Word>tailcall</Word>
      <Word>trait</Word>
      <Word>virtual</Word>
      <Word>volatile</Word>
    </Keywords>
    -->
    
  </RuleSet>
  
  <RuleSet name="_StringEscapeSet"> 
    <!-- using just a Rule does not work !-->
    <!-- https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/strings -->    
    <Span color="StringEscaped"><Begin>\\[abfnrtv\\"']  </Begin>  <End>(?=.)</End> </Span>
    <!-- unicode characters  --> 
    <Span color="StringEscaped"><Begin>\\[\d]{3}        </Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\U[0-9a-fA-F]{8}</Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\u[0-9a-fA-F]{4}</Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\x[0-9a-fA-F]{2}</Begin>  <End>(?=.)</End> </Span> 
  </RuleSet >
  
  <RuleSet name="_StringFormatSet">    
    <Span color="StringEscaped"><Begin>%</Begin>  <End>[sfd%bciuxXoeEfFgGeEgGMOAAat]</End> </Span> 
  </RuleSet >
  
  <RuleSet name="_StringDollarFormatSet"> 
    <Span>  <Begin color="StringEscaped">\{\{</Begin> <End >(?=.)</End>  </Span> 
    <Span>  <Begin color="StringEscaped">\}\}</Begin> <End >(?=.)</End>  </Span> 
    <Import ruleSet="_StringFormatSet"/> 
    <Span color="DollarInlines">
      <Begin color="StringEscaped">\{</Begin>  
      <End color="StringEscaped">\}</End> 
    </Span> 
  </RuleSet >
  
  <RuleSet name="LoadDllSet">

    <!-- compiler directives: -->
    <Span color="NonEval" multiline="true">
      <Begin color="CompilerDirectives">\#if\s*COMPILED </Begin> <!-- '#' needs to be escaped too, \#  it is a regex comment  --> 
      <End color="CompilerDirectives">\#endif\b|\#else\b</End> 
    </Span>   

    <Span color="CompilerDirectives" multiline="false">
      <Begin color="CompilerDirectives">\#if\b </Begin> <!-- '#' needs to be escaped too, \#  it is a regex comment  -->      
      <RuleSet>
        <Import ruleSet="CommentSet"/>        
      </RuleSet >  
    </Span>
    <Rule color="CompilerDirectives">\#endif\b</Rule>
    <Rule color="CompilerDirectives">\#else\b</Rule>
    
    <Span color="LoadDirectives" multiline="false">
      <Begin >\#r\b|\#load\b|\#nowarn\b </Begin> <!-- '#' needs to be escaped too, \#  it is a regex comment  -->   
      <End>(?=(;;))</End> <!-- so that NonEval works -->
      <RuleSet>
        <Import ruleSet="CommentSet"/>
        
        <Span color="LoadNuget" multiline="false">
          <Begin color="LoadDllPath">"nuget:</Begin>  
          <End color="LoadDllPath">"|(,\s\d+.\d+.\d+")</End> 
        </Span> 
        <Span color="LoadDll" multiline="false">
          <Begin color="LoadDllPath">@?"[^\s\/][^"]+(\\|\/)|@?"(?=[^\s\/])</Begin>  <!--matches the directories part of a full file path-->
          <End color="LoadDllPath">"|(.dll")</End> 
        </Span>
      </RuleSet >  
    </Span>
    
    <Span color="LoadDirectives" multiline="false">
      <Begin>\#I\b</Begin>    <!-- In case of #I highlight the folder path with color="LoadDll" -->
      <End>(?=(;;))</End> <!-- so that NonEval works -->
      <RuleSet>
        <Import ruleSet="CommentSet"/>
        <Span color="LoadPath" multiline="false">
          <Begin color="LoadDllPath">@?"</Begin>  
          <End color="LoadDllPath">"</End> 
        </Span> 
      </RuleSet >  
    </Span>

  </RuleSet >
  
  <RuleSet name="StringSet">
  
    <Span color="Char" > 
      <Begin>'(?=\\)|'.(?=')</Begin>  <!-- a ' followed by one or zero \ then any char and then another ' in look ahead-->
      <End>'</End>     
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
      </RuleSet>
    </Span>
    
    <Span color="StringVerbatim" multiline="true">
      <Begin>@"</Begin>
      <End>"</End>      
    </Span>

    <Span color="StringVerbatim" multiline="true">
      <Begin>"""</Begin>
      <End>"""</End>
    </Span>
    
    <Span color="String" multiline="true"> 
      <Begin>\$"</Begin>  
      <End>"</End>    
      <RuleSet>        
        <Import ruleSet="_StringDollarFormatSet"/>
        <Import ruleSet="_StringEscapeSet"/>
      </RuleSet>
    </Span>

    <Span color="String" multiline="true"> 
      <Begin>"</Begin>  
      <End>"</End>    
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
      </RuleSet>
    </Span>
  </RuleSet>
  
  <RuleSet name="PunctuationSet">   
    <!-- the back and forward arrows : -->     
    <Rule color="Punctuation">-&gt;</Rule>  
    <Rule color="Punctuation">&lt;-</Rule>
    <!-- any single character punctuation
     . $ ^ { [ ( | ) * + ? \ need escape 
      but excluding math operators: -->    
    <Rule color="Punctuation">[ \. \$ \^ \{ \[ \( \| \)   \? \\ &lt; &gt; &amp;  , : \] \}  ~ !  % = ]</Rule> 
  </RuleSet>

  
  <RuleSet name="PrintAndFailStatements">
    <!-- in the semantic highlighting code there is an exclusion for these function names so that this here gets applied-->
    <Span color="FailString">  
      <Begin color= "FailPath" >failwithf?\s*\"</Begin>  
      <End   color= "FailPath" >\"</End>      
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/>
      </RuleSet>
    </Span>
    <Span color="FailString">  
      <Begin color= "FailPath" >failwithf?\s*\$\"</Begin>  <!-- With $"{}" formatting  -->      
      <End   color= "FailPath" >\"</End>      
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/>
        <Import ruleSet="_StringDollarFormatSet"/>
      </RuleSet>
    </Span>

    <Span color="FailString">  <!-- for failIfFalse and failIfNull. part of FsEx.dll-->
      <Begin color= "FailPath" >failIf\w+\s*\$?\"</Begin>  
      <End   color= "FailPath" >\"</End>      
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <!-- <Import ruleSet="_StringFormatSet"/> formatting not possible in failIfFalse and similar functions -->
      </RuleSet>
    </Span>

    <!-- in case they are followed by a name and not a literal string starting with "-->
    <Keywords color = "PrintStatement">
      <Word>print</Word> <!-- part of FsEx.dll-->      
      <Word>printFull</Word>
    </Keywords>
  
    <Span color="PrintString" >      
      <Begin color= "PrintStatement" >\bPrintfn?\.\w+\s+\"</Begin> <!-- for Printfn.red and similar functions. With $"{}" formatting -->
      <End   color= "PrintStatement" >\"</End>     
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/>             
      </RuleSet>
    </Span>

    <Span color="PrintString" >      
      <Begin color= "PrintStatement" >\bPrintfn?\.\w+\s+\$\"</Begin> <!-- for Printfn.red and similar functions. With $"{}" formatting -->
      <End   color= "PrintStatement" >\"</End>     
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/> 
        <Import ruleSet="_StringDollarFormatSet"/>       
      </RuleSet>
    </Span>

    <Span color="PrintString" >      
      <Begin color= "PrintStatement" >\be?printf?n?\s*\$\"</Begin> <!-- With $"{}" formatting  -->
      <End   color= "PrintStatement" >\"</End>     
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/>
        <Import ruleSet="_StringDollarFormatSet"/>
      </RuleSet>
    </Span>

    <Span color="PrintString" >      
      <Begin color= "PrintStatement" >\be?printf?n?.\s*\"</Begin> 
      <End   color= "PrintStatement" >\"</End>     
      <RuleSet>
        <Import ruleSet="_StringEscapeSet"/>
        <Import ruleSet="_StringFormatSet"/>        
      </RuleSet>
    </Span>

  </RuleSet>

  <RuleSet name="DoubleTicksSet">
    <Span color="InDoubleTicks"  multiline="false" begin="``" end="``" /> 
  </RuleSet> 

  <RuleSet name="CodeMain">
    <Import ruleSet="CommentSet"/> 
    <Import ruleSet="InlineCommentSet"/> 
    <Import ruleSet="StringSet"/>
    <Import ruleSet="KeywordSet"/>    
    <Import ruleSet="PrintAndFailStatements"/>
    <Import ruleSet="DoubleTicksSet"/>

    <!-- a hex number | binary number | (number just starting with floating point | with optional inner floating point) and an optional exponent. https://regexr.com/52d6q -->
    <!-- <Rule color="NumberLiteral">((-\.|\.)[0-9_]+|(\b|-)[0-9_]+\.?[0-9_]*)([eE][+-]?[0-9]+)? </Rule> -->
    
    <Rule color="ExponentNumberLit">\b0[xX]</Rule>
    <Rule color="ExponentNumberLit">\b0[bB]</Rule>
    <Rule color="HexNumberLiteral">(?&lt;=0[xX])[0-9a-fA-F_]+</Rule>
    <Rule color="BinNumberLiteral">(?&lt;=0[bB])[01_]+</Rule>
    <Rule color="ExponentNumberLit">(?&lt;=\d)[eE][+-]?[0-9]+ </Rule><!-- (?&lt;=\d) is a positive lookbehind for digits -->
    <Rule color="NumberLiteral">\b[0-9_]+\.?[0-9_]*</Rule>
    <Rule color="Punctuation">[0-9\w]\-</Rule> <!-- to exclude a 'x-1' to be highlighted below too: -->
    <Rule color="NegNumberLiteral">(?&lt;!\d)-[0-9_]+\.?[0-9_]*</Rule> <!-- (?&lt;!\d) is a negative lookbehind for digits -->        
    
    <Rule color="Semicolon">;</Rule>

    <Span color="NonEval" multiline="true" > <!--anything after a double semicolon is ignored in FSI-->
      <Begin>;;</Begin> 
      <End>justAnyStringThatNeverHappens</End>
    </Span> 

    <Span color="Attributes">
      <Begin color="Keywords">\[&lt;</Begin>
      <End color="Keywords">&gt;\]</End>      
      <RuleSet> 
        <Import ruleSet="StringSet"/>
        <Import ruleSet="PunctuationSet"/>         
      </RuleSet>
    </Span>

  </RuleSet>
  
  <!--the main set (it must not have a name attribute): -->  
  <RuleSet>   
    <Import ruleSet="LoadDllSet"/>     
    <Import ruleSet="CodeMain"/>  
    <!-- import last: -->  
    <Import ruleSet="PunctuationSet"/>  
  </RuleSet>

</SyntaxDefinition>
