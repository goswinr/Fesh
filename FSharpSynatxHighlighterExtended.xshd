<?xml version="1.0" ?> <!--encoding="UTF-8" --> 
<!-- 
  copied from C#
  https://raw.githubusercontent.com/icsharpcode/AvalonEdit/master/ICSharpCode.AvalonEdit/Highlighting/Resources/CSharp-Mode.xshd 
  help:
  https://github.com/icsharpcode/SharpDevelop/wiki/XSHD-Tags
  https://github.com/icsharpcode/SharpDevelop/wiki/Syntax-highlighting  
  -->


<SyntaxDefinition name = "F#" extensions = ".fs;.fsi;.fsx" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  
  <!-- The named colors 'Comment' and 'String' are also used in SharpDevelop to detect if a line is inside a multiline string/comment -->
  <!--https://www.rapidtables.com/convert/color/rgb-to-hex.html-->
  <Color name="Comment"             foreground="#00BB00" />
  <Color name="DocComment"          foreground="#007700" />

  <Color name="String"              foreground="#AA1111" />
  <Color name="StringVerbatim"      foreground="#CC0000" />  
  <Color name="StringFormating"     foreground="#990099" />
  <Color name="StringEscaped"       foreground="#7050DC" />  
  <Color name="Char"                foreground="#FF0040" />
  <Color name="LoadDirectives"      foreground="#887766" />
  <Color name="Punctuation"         foreground="#0099EE" />
  <Color name="Attributes"          foreground="#AA88AA" />  
  <Color name="Keywords"            foreground="#0000DD" /> <!--fontWeight="bold" -->
  <Color name="ReservedKeywords"    foreground="#7777FF" /> <!--fontWeight="bold" -->
  <Color name="MethodCall"          foreground="#0000AA" /> <!-- fontWeight="bold" fontStyle="italic"-->
  <Color name="NumberLiteral"       foreground="#880088" />
  <Color name="FailPath"            foreground="#888888" />
  <Color name="FailString"          foreground="#D0A040" />  
  <Color name="PrintStatement"      foreground="#206060" />
  <Color name="PrintString"         foreground="#D09070" />
  <Color name="TrueCol"             foreground="#008090" fontStyle="italic" fontWeight="bold" />
  <Color name="FalseCol"            foreground="#A70090" fontStyle="italic" fontWeight="bold" />
  <Color name="Semicolon"           foreground="#A0A0A0" />
  <Color name="TypeAnnotation"      foreground="#00C0A0" />
  <Color name="RecordNames"         foreground="#808080" />

  <Color name="LetBinding"          foreground="#A030A0" />
  <Color name="LetRec"              foreground="#B03060" />
  <Color name="LetMutable"          foreground="#D08030" />
  <Color name="Let"                 foreground="#7700CC" />  
  
  <Color name="DocCommentStart"     foreground="#AACCAA" /><!-- taken from https://github.com/icsharpcode/AvalonEdit/blob/master/ICSharpCode.AvalonEdit/Highlighting/Resources/XmlDoc.xshd-->
  <Color name="XmlString"           foreground="#669966" />
  <Color name="XmlPunctuation"      foreground="#666666" />
  <Color name="KnownDocTags"        foreground="#666666" />
  

  <!-- Regexes that are listed higer have precedence of lower positions in this list
  Spans aer overwriting rules  even if rule apers before the span!-->

  <RuleSet name="DocCommentSet">
    <Span color="DocComment">
      <Begin>&lt;</Begin>
      <End>&gt;</End>
      <RuleSet>
        <Span color="XmlString">
          <Begin>"</Begin>
          <End>"</End>
        </Span>
        <Keywords color="XmlPunctuation">
          <Word>/</Word>
          <Word>|</Word>
          <Word>=</Word>
        </Keywords>
        <Keywords color="KnownDocTags">
          <Word>c</Word>
          <Word>code</Word>
          <Word>example</Word>
          <Word>exception</Word>
          <Word>list</Word>
          <Word>para</Word>
          <Word>param</Word>
          <Word>paramref</Word>
          <Word>permission</Word>
          <Word>remarks</Word>
          <Word>returns</Word>
          <Word>see</Word>
          <Word>seealso</Word>
          <Word>summary</Word>
          <Word>value</Word>
          <Word>type</Word>
          <Word>name</Word>
          <Word>cref</Word>
          <Word>item</Word>
          <Word>term</Word>
          <Word>description</Word>
          <Word>listheader</Word>
          <Word>typeparam</Word>
          <Word>typeparamref</Word>
        </Keywords>
      </RuleSet>
    </Span>
  </RuleSet>
  
  <RuleSet name="CommentMarkerSet">
    <Keywords fontWeight="bold" foreground="#AA0000">
      <Word>TODO</Word>
      <Word>FIXME</Word>
    </Keywords>
    <Keywords fontWeight="bold" foreground="#E0E000">
      <Word>HACK</Word>
      <Word>UNDONE</Word>
    </Keywords>
  </RuleSet >
  
  <RuleSet name="CommentSet">
    <Span color="DocComment">
      <Begin color="DocCommentStart">///(?!/)</Begin>
      <RuleSet>
        <Import ruleSet="DocCommentSet"/>
        <Import ruleSet="CommentMarkerSet"/>
      </RuleSet>
    </Span>

    <Span color="Comment" ruleSet="CommentMarkerSet">
      <Begin>//</Begin>      
    </Span>

    <Span color="Comment" ruleSet="CommentMarkerSet" multiline="true">
      <Begin>\(\*</Begin>
      <End>\*\)</End>      
    </Span> 
  </RuleSet >

  <RuleSet name="KeywordSet">
    <Keywords color="TrueCol">    <Word>true</Word>    </Keywords>  
    <Keywords color="FalseCol">   <Word>false</Word>   </Keywords>

    <Keywords color="Keywords">

      <Word>match!</Word>  <!-- exclamation mark does not work ??-->
      <Word>let!</Word>  
      <Word>do!</Word>  
      <Word>yield!</Word>  

    
      <Word>__SOURCE_DIRECTORY__</Word>
      <Word>__SOURCE_FILE__</Word>
      <Word>__LINE__</Word>
      <!-- take from https://github.com/Microsoft/visualfsharp/blob/f214dcc38f6d34db8902eb40bd5b037ade59a67c/src/fsharp/lexhelp.fs#L362 -->
      <Word>abstract</Word>
      <Word>and</Word>
      <Word>as</Word>
      <Word>assert</Word>
      <Word>base</Word>
      <Word>begin</Word>
      <Word>class</Word>
      <Word>default</Word>
      <Word>delegate</Word>
      <Word>do</Word>      
      <Word>done</Word>
      <Word>downcast</Word>
      <Word>downto</Word>
      <Word>elif</Word>
      <Word>else</Word>
      <Word>end</Word>
      <Word>exception</Word>
      <Word>extern</Word>
      <Word>FALSE</Word>
      <Word>finally</Word>
      <Word>fixed</Word>    
      <Word>for</Word>
      <Word>fun</Word>
      <Word>function</Word>
      <Word>global</Word>
      <Word>if</Word>
      <Word>in</Word>
      <Word>inherit</Word>
      <Word>inline</Word>
      <Word>interface</Word>
      <Word>internal</Word>
      <Word>lazy</Word>
      <!-- <Word>let</Word>  -->    <!-- has sperate color below in LetBindings-->
      <Word>match</Word>      
      <Word>member</Word>
      <Word>module</Word>
      <Word>mutable</Word>
      <Word>namespace</Word>
      <Word>new</Word>
      <Word>not</Word>
      <Word>null</Word>
      <Word>of</Word>
      <Word>open</Word>
      <Word>or</Word>
      <Word>override</Word>
      <Word>private</Word>
      <Word>public</Word>
      <Word>rec</Word>
      <Word>return</Word>
      <Word>return!</Word>
      <Word>select</Word>
      <Word>static</Word>
      <Word>struct</Word>
      <Word>then</Word>
      <Word>to</Word>
      <Word>TRUE</Word>
      <Word>try</Word>
      <Word>type</Word>
      <Word>upcast</Word>
      <Word>use</Word>
      <Word>use!</Word>
      <Word>val</Word>
      <Word>void</Word>
      <Word>when</Word>
      <Word>while</Word>
      <Word>with</Word>
      <Word>yield</Word>    
    </Keywords>

    <Keywords color = "ReservedKeywords">
      <Word>atomic</Word>
      <Word>break</Word>
      <Word>checked</Word>
      <Word>component</Word>
      <Word>const</Word>
      <Word>constraint</Word>
      <Word>constructor</Word>
      <Word>continue</Word>
      <Word>eager</Word>
      <Word>event</Word>
      <Word>external</Word>
      <Word>fixed</Word>
      <Word>functor</Word>
      <Word>include</Word>
      <Word>method</Word>
      <Word>mixin</Word>
      <Word>object</Word>
      <Word>parallel</Word>
      <Word>process</Word>
      <Word>protected</Word>
      <Word>pure</Word>
      <Word>sealed</Word>
      <Word>tailcall</Word>
      <Word>trait</Word>
      <Word>virtual</Word>
      <Word>volatile</Word>
    </Keywords>
  </RuleSet>

  <RuleSet name="StringEscapeSet"> 
    <!-- using just a Rule does not work !-->
    <!-- https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/strings -->    
    <Span color="StringEscaped"><Begin>\\[abfnrtv\\"']  </Begin>  <End>(?=.)</End> </Span>
    <!-- unicode characters  --> 
    <Span color="StringEscaped"><Begin>\\[\d]{3}        </Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\U[0-9a-fA-F]{8}</Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\u[0-9a-fA-F]{4}</Begin>  <End>(?=.)</End> </Span> 
    <Span color="StringEscaped"><Begin>\\x[0-9a-fA-F]{2}</Begin>  <End>(?=.)</End> </Span> 
  </RuleSet >

  <RuleSet name="StringFormatSet">
    <!-- using just a Rule does not work !-->
    <Span color="StringEscaped"><Begin>%[sfd%bciuxXoeEfFgGeEgGMOAAat]</Begin>  <End>(?=.)</End> </Span> 
  </RuleSet >


  <RuleSet name="StringSet">

    <Keywords color = "LoadDirectives">
      <Word>#r</Word>
      <Word>#load</Word>
      <Word>#I</Word>
    </Keywords>
   


    <Span color="Char" > 
      <Begin>'</Begin>  
      <End>'</End>     
      <RuleSet>
        <Import ruleSet="StringEscapeSet"/>
      </RuleSet>
    </Span>


    <Span color="StringVerbatim" multiline="true">
      <Begin>@"</Begin>
      <End>"</End>      
    </Span>

    
    <Span color="StringVerbatim" multiline="true">
      <Begin>"""</Begin>
      <End>"""</End>
    </Span>
    
    <Span color="String" multiline="true"> 
      <Begin>"</Begin>  
      <End>"</End>    
      <RuleSet>
        <Import ruleSet="StringEscapeSet"/>
      </RuleSet>
    </Span>

  </RuleSet>
  
  <RuleSet> <!--the main set (must not have a name attribute)-->

    <Import ruleSet="CommentSet"/> 
    <Import ruleSet="StringSet"/>
    <Import ruleSet="KeywordSet"/>

    <!-- a hex number | binary number | (number just starting with floating point | with optional inner floating point) and an optional exponent. https://regexr.com/52d6q -->
    <Rule color="NumberLiteral">\b0[xX][0-9a-fA-F_]+|\b0[bB][01_]+|((-\.|\.)[0-9_]+|(\b|-)[0-9_]+\.?[0-9_]*)([eE][+-]?[0-9]+)? </Rule>
      
   
    <Rule color="Punctuation">[ \[ \]  \| \\ \( \) &lt; &gt; &amp; ? , . :  { } + \- * ^ ~ ! / % = ]</Rule>
    
    <Rule color="Semicolon">;</Rule>

    <Span color="Attributes">
      <Begin>\[&lt;</Begin>
      <End>&gt;\]</End>
    </Span>

    <!-- Mark previous rule, not ideal for F# since parens are optional for function calls
    test on https://regexr.com/ \b[\d\w_]+(?=\s*\() 
    <Rule color="MethodCall">
      \b        # match before
      [\d\w_]+  # an identifier
      (?=\s*\() # followed by (
    </Rule>
    -->      
    
    <Span color="TypeAnnotation" multiline="false" > 
      <!-- to match one colon but not two: negative look behind for a colon, the colon, negative look ahead for a colon. 
           All that wraped in CDATA because xml readers fails on negative look behind tag  ?<!    -->
      <Begin color="Punctuation"><![CDATA[(?<!:):(?!:)]]></Begin> 
      <End color="Punctuation">[\),;=]</End>  
       <RuleSet>
        <Rule color="Punctuation">[,\[\]*&lt;&gt;]</Rule>
      </RuleSet>
    </Span>

    <!--names in Records-->
    <Span color="RecordNames" multiline="false">
      <!-- some space and an open bracket OR a semicolon folowed by a closing bracket but without a opening bracket before -->
      <Begin color="Punctuation">\s* \{ | ;(?=[^\{]+\}) </Begin> 
      <End color="Punctuation">=|:</End> 
    </Span> 

   

    <Span color="LetMutable"> 
      <Begin color= "Keywords" >\blet\s*mutable\s*</Begin> 
      <End color="Punctuation" >[=\s\(]</End> 
    </Span>

    <Span color="LetRec"> 
      <Begin color= "Keywords" >\blet\s*rec\s*</Begin> 
      <End color="Punctuation" >[=\s\(]</End> 
    </Span>

    <!-- <Span color="LetBinding">  -->
    <Span color="LetBinding"> 
      <Begin color= "Keywords" >\blet\s*</Begin> 
      <End color="Punctuation" >[=\s\(]</End> 
    </Span>

    <Span color="FailString">   <!-- multiline="true"   -->
      <Begin color= "FailPath" >failwithf?\s*"</Begin>  
      <End   color= "FailPath" >"</End>      
      <RuleSet>
        <Import ruleSet="StringEscapeSet"/>
        <Import ruleSet="StringFormatSet"/>
      </RuleSet>
    </Span>

    <!-- incase they are followed by a name and not a literal string starting with "-->
    <Keywords color = "PrintStatement">
      <Word>print</Word> <!-- part of FsEx.dll-->
      <Word>print2</Word>
      <Word>print3</Word>
      <Word>printFull</Word>
      
      <Word>printf</Word>
      <Word>printfn</Word>      
      <Word>eprintf</Word>
      <Word>eprintfn</Word>
    </Keywords>


    <Span color="PrintString" >      
      <Begin color= "PrintStatement" >\be?print2?f?n?\s*"</Begin> 
      <End   color= "PrintStatement" >"</End>     
      <RuleSet>
        <Import ruleSet="StringEscapeSet"/>
        <Import ruleSet="StringFormatSet"/>
      </RuleSet>
    </Span>


  </RuleSet>

</SyntaxDefinition>
